Conner Mattingly	
HW3 Cpts 455

Problems from textbook Chapter 3:
P15, P16, P22, P23, P27, P31, P32, P40, P43, P54, P55

P15.
Consider the cross-country example shown in Figure 3.17. How big would the window size have to be for the channel utilization to be greater than 98 percent? Suppose that the size of a packet is 1,500 bytes, including both header fields and data.
	L = 12,000 bits
	R = 10^9 bits/second
	RTT = .3 seconds

 Using the utilization of the sender formula I set it equal to .98 (98%)  and solved for L to get the minimum 'window size'  for 98%% utilization.
  window must equal (14.7)x10^9 bits

P16.
Suppose an application uses rdt 3.0 as its transport layer protocol. As the stop-and-wait protocol has very low channel utilization (shown in the crosscountry example), the designers of this application let the receiver keep sending back a number (more than two) of alternating ACK 0 and ACK 1 even if the corresponding data have not arrived at the receiver. Would this application design increase the channel utilization? Why? Are there any potential problems with this approach? Explain.
  - Yes it would increase channel utilization due to the fact that the sender has to wait on an ACK in order to send its next packet.  One potential problem is that  if  a packet is lost it will never be resent and therefore never recieved by the reciver since an ACK was already sent.

P22. 
Consider the GBN protocol with a sender window size of 4 and a sequence number range of 1,024. Suppose that at time t, the next in-order packet that the receiver is expecting has a sequence number of k. Assume that the medium does not reorder messages. Answer the following questions: 
a. What are the possible sets of sequence numbers inside the sender’s window at time t? Justify your answer.
  - [k,k+1,k+2,k+3]
    [k-1,k,k+1,k+2]
    [k-2,k-1,k,k+1]
    [k-3,k-2,k-1,k]
 
b. What are all possible values of the ACK field in all possible messages currently propagating back to the sender at time t? Justify your answer.
?

P23. 
Consider the GBN and SR protocols. Suppose the sequence number space is of size k. What is the largest allowable sender window that will avoid the occurrence of problems such as that in Figure 3.27 for each of these protocols?
- GBN = k
- SR = k/2

P27.
Host A and B are communicating over a TCP connection, and Host B has already received from A all bytes up through byte 126. Suppose Host A then sends two segments to Host B back-to-back. The first and second segments contain 80 and 40 bytes of data, respectively. In the first segment, the sequence number is 127, the source port number is 302, and the destination port number is 80. Host B sends an acknowledgment whenever it receives a segment from Host A.
a. In the second segment sent from Host A to B, what are the sequence number, source port number, and destination port number?
- sequence number: 208
- source port: 302
- destination port: 80

b. If the first segment arrives before the second segment, in the acknowledgment of the first arriving segment, what is the acknowledgment number,the source port number, and the destination port number?
- ack number: 127
- source port: 80
- destination port: 302

c. If the second segment arrives before the first segment, in the acknowledgment of the first arriving segment, what is the acknowledgment number?
- ack number: 208
- source port: 80
- destination port: 302

d. Suppose the two segments sent by A arrive in order at B. The first acknowledgment is lost and the second acknowledgment arrives after the first timeout interval. Draw a timing diagram, showing these segments and all other segments and acknowledgments sent. (Assume there is no additional packet loss.) For each segment in your figure, provide the sequence number and the number of bytes of data; for each acknowledgment that you add, provide the acknowledgment number.



P31.
Suppose that the five measured SampleRTT values (see Section 3.5.3) are 106 ms, 120 ms, 140 ms, 90 ms, and 115 ms. Compute the EstimatedRTT after each of these SampleRTT values is obtained, using a value of α = 0.125 and assuming that the value of EstimatedRTT was 100 ms just before the first of these five samples were obtained. Compute also the DevRTT after each sample is obtained, assuming a value of β = 0.25 and assuming the value of DevRTT was 5 ms just before the first of these five samples was obtained. Last, compute the TCP TimeoutInterval after each of these samples is obtained.

EstimatedRTT = (1 – a) • EstimatedRTT + a • SampleRT
EstimatedRTT = 100.75
EstimatedRTT = 103.156
EstimatedRTT = 107.76
EstimatedRTT = 105.54
EstimatedRTT = 106.725

DevRTT = (1 – b) • DevRTT + b •| SampleRTT – EstimatedRTT |
DevRTT = 5.25
DevRTT = 8.75
DevRTT = 43.404
DevRTT = 36.99
DevRTT = 30.10

TimeoutInterval = EstimatedRTT + 4 • DevRTT
TimoutInterval = 121.75
TimoutInterval = 138.156
TimoutInterval = 281.376
TimoutInterval = 253.5
TimoutInterval = 227.12


P32. 
Consider the TCP procedure for estimating RTT. Suppose that a = 0.1. Let SampleRTT 1 be the most recent sample RTT, let SampleRTT 2 be the next most recent sample RTT, and so on. 
a. For a given TCP connection, suppose four acknowledgments have been returned with corresponding sample RTTs: SampleRTT 4 , SampleRTT 3 , SampleRTT 2 , and SampleRTT 1 . Express EstimatedRTT in terms of the four sample RTTs. 
	- E5 is the original estimate
	  .(9^4)(E5) + (.9^3)(s4) + (.9^2)(s3) + (.09)(s2) + (.1)(s1)

b. Generalize your formula for n sample RTTs. 
	- The sum from i=1 to N over { [(1-a)^(i-1)]*(a)*(Si) } Plus (1-a)^n (E sub(n+1))

c. For the formula in part (b) let n approach infinity. Comment on why this averaging procedure is called an exponential moving average.
	- This is because the value of The samples decay exponentially as N increases towards infinity.

P40. 
Consider Figure 3.58. Assuming TCP Reno is the protocol experiencing the behavior shown above, answer the following questions. In all cases, you should provide a short discussion justifying your answer. 
a. Identify the intervals of time when TCP slow start is operating.
	- 1-6 and 23-26
b. Identify the intervals of time when TCP congestion avoidance is operating.
	- 6-16 and 17-22
c. After the 16th transmission round, is segment loss detected by a triple duplicate ACK or by a timeout?
	- Triple duplicate ACK because it only drops to where ssthresh must be and continues with congestion avoidance.
d. After the 22nd transmission round, is segment loss detected by a triple duplicate ACK or by a timeout?
	- A timeout indicated by the congestion window dropping to one and slow start begining operation.
e. What is the initial value of ssthresh at the first transmission round?
	- it would apear to be about 32 segments
f. What is the value of ssthresh at the 18th transmission round?
	- 42/2 = 21 segments
g. What is the value of ssthresh at the 24th transmission round?
	- Half of what it was before transmission round 22 so 16 segments.
h. During what transmission round is the 70th segment sent?
	- the sixth transmisison round.  81 segments total have been sent after the 6th round.
i. Assuming a packet loss is detected after the 26th round by the receipt of a triple duplicate ACK, what will be the values of the congestion window size and of ssthresh?
	- cwnd=ssthresh+3 • MSS
	- ssthresh = cwnd/2 = 8/2 = 4 segments
j. Suppose TCP Tahoe is used (instead of TCP Reno), and assume that triple duplicate ACKs are received at the 16th round. What are the ssthresh and the congestion window size at the 19th round? 
	- ssthresh = 21
	- cwnd = 4 since slow start begins again from the original cwnd
k. Again suppose TCP Tahoe is used, and there is a timeout event at 22nd round. How many packets have been sent out from 17th round till 22nd round, inclusive?
	- if assuming congestion avoidance is being used then 24+25+26+27+28+29 = 159 segments

P43. 
Host A is sending an enormous file to Host B over a TCP connection. Over this connection there is never any packet loss and the timers never expire. Denote the transmission rate of the link connecting Host A to the Internet by R bps. Suppose that the process in Host A is capable of sending data into its TCP socket at a rate S bps, where S = 10 · R. Further suppose that the TCP receive buffer is large enough to hold the entire file, and the send buffer can hold only one percent of the file. What would prevent the process in Host A from continuously passing data to its TCP socket at rate S bps? TCP flow control? TCP congestion control? Or something else? Elaborate. 
	-  If R is less than 1% of the file size then the send buffer would fill up  and restrict the flow of data to R which is less than S.

P54. 
In our discussion of TCP congestion control in Section 3.7, we implicitly assumed that the TCP sender always had data to send. Consider now the case that the TCP sender sends a large amount of data and then goes idle (since it has no more data to send) at t 1 . TCP remains idle for a relatively long period of time and then wants to send more data at t 2 . What are the advantages and dis- advantages of having TCP use the cwnd and ssthresh values from t 1 when starting to send data at t 2 ? What alternative would you recommend? Why?
	- 

P55.
In this problem we investigate whether either UDP or TCP provides a degree of end-point authentication. 
a. Consider a server that receives a request within a UDP packet and responds to that request within a UDP packet (for example, as done by a DNS server). If a client with IP address X spoofs its address with address Y, where will the server send its response? 
b. Suppose a server receives a SYN with IP source address Y, and after responding with a SYNACK, receives an ACK with IP source address Y with the correct acknowledgment number. Assuming the server chooses a random initial sequence number and there is no “man-in-the-middle,” can the server be certain that the client is indeed at Y (and not at some other address X that is spoofing Y)?




